@using PerfectedCheck.Services
@model List<TaskModel>
@inject TaskService TaskService
@{
    ViewData["Title"] = "My Tasks";
}

<style>
    .edit-control {
        opacity: 0%;
        transition: opacity 0.3s ease-out;
    }

    .task-row:hover .edit-control {
        opacity: 100%;
        pointer-events: auto;
    }
</style>


<div class="card p-3">
    <p class="h2">Todo List</p>

    <div class="progress mb-3">
        <div id="taskProgressBar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0"
             aria-valuemin="0" aria-valuemax="100">
            0%
        </div>
    </div>
    <form method="post" asp-action="Create" class="mb-4 d-flex gap-2">
        <input name="Task" class="form-control" placeholder="What needs doing?" required />
        <button type="submit" class="btn btn-primary">Add</button>
    </form>


    <ul class="list-group" id="task-list">
        @foreach (var task in Model)
        {
            var isEditing = ViewData["EditTaskId"]?.ToString() == task.Id.ToString();
            <li class="list-group-item d-flex justify-content-between align-items-center task-row">
                <div class="d-flex align-items-center gap-2">
                    <form asp-action="ToggleStatus" method="post">
                        <input type="hidden" name="Id" value="@task.Id" />
                        <input type="checkbox" class="form-check form-check-input task-checkbox" onchange="this.form.submit()" @(task.IsCompleted ? "checked" : "") />
                    </form>

                    @if (isEditing)
                    {
                        <form method="post" asp-action="Edit" class="d-flex align-items-center gap-2">
                            <input type="hidden" name="Id" value="@task.Id" />
                            <input type="text" name="Task" class="form-control" value="@task.Task" />
                            <button type="submit" class="btn btn-success">Save</button>
                            <button type="submit" name="DeleteOnEmpty" value="true" class="btn btn-danger">Delete</button>
                        </form>
                    }
                    else
                    {
                        <span class="@(task.IsCompleted ? "text-decoration-line-through text-muted" : "")">
                            @task.Task
                        </span>
                    }
                </div>

                <div class="d-flex gap-2 edit-control">
                    @if (!isEditing)
                    {
                        <form method="get" asp-action="EditView">
                            <input type="hidden" name="Id" value="@task.Id" />
                            <button class="btn btn-sm btn-outline-secondary">Edit</button>
                        </form>
                        <button class="btn-close align-content-center" data-bs-toggle="modal" data-bs-target="#deleteModal" data-task-id="@task.Id"></button>
                    }
                </div>
            </li>
        }
    </ul>
</div>

<!-- Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <form method="post" asp-action="Delete">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Task</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this task?
                    <input type="hidden" name="Id" id="delete-task-id" />
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-danger">Yes, delete it</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
    function updateProgressBar() {
        const checkboxes = document.querySelectorAll('.task-checkbox');
        const total = checkboxes.length;
        let completed = 0;

        checkboxes.forEach(cb => {
            if (cb.checked) completed++;
        });

        const percent = total === 0 ? 0 : Math.round((completed / total) * 100);

        const progressBar = document.getElementById('taskProgressBar');
        progressBar.style.width = percent + '%';
        progressBar.setAttribute('aria-valuenow', percent);
        progressBar.textContent = percent + '%';
    }

    // Run on page load
    document.addEventListener('DOMContentLoaded', updateProgressBar);

    // Run whenever a checkbox is toggled
    document.querySelectorAll('.task-checkbox').forEach(cb => {
        cb.addEventListener('change', updateProgressBar);
    });
</script>

@section Scripts {
    <script>
        var deleteModal = document.getElementById('deleteModal');
        deleteModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var taskId = button.getAttribute('data-task-id');
            var input = deleteModal.querySelector('#delete-task-id');
            input.value = taskId;
        });
    </script>
}
